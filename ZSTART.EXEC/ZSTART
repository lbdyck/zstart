/* --------------------  rexx procedure  -------------------- */
 ver = '2.3'
/* Name:      zstart                                          *
 *                                                            *
 * Function:  Create/Update the ISPF Profile variable         *
 *            ZSTART which is used each time ISPF Starts      *
 *            to setup the ISPF envionrment.                  *
 *                                                            *
 * Syntax:    %zstart option                                  *
 *                                                            *
 * Notes:     1. option is used internally to pass the        *
 *               zstart variable info so it can be            *
 *               saved under the ISP profile.                 *
 *               option must start with ISP: and then         *
 *               the zstart values                            *
 *            2. The ISPF panel is included inline at the     *
 *               end of this exec and is loaded dynamically   *
 *               by the loadispf subroutine                   *
 *            3. Each variable line is scrollable upto        *
 *               1024 characters                              *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *            Bruce Koss (Collaborator)                       *
 *                                                            *
 * History:                                                   *
 *            12/12/17 - v2.3 Fix typo on panel               *
 *            08/16/17 - v2.2 Make variable lines scrollable  *
 *            03/14/17 - v2.1 Change to use VIO for temp d/s  *
 *            05/02/16 - v2.0 Removes and adds back "ISPF;"   *
 *                       command, ensuring "ISPF;" is always  *
 *                       the 1st command in ZSTART.           *
 *            04/25/16 - v1.7 Wordsmith on Panel              *
 *            04/23/16 - v1.6 Data Lost Prevention            *
 *                     - If cview is 1 or 2 and row 7 is >    *
 *                       71 then change cview to 2 or 3       *
 *            04/22/16 - v1.5 New Function                    *
 *                     - Add save into ISPPROF as well as     *
 *                       default ISRPROF                      *
 *            04/21/16 - v1.4 Bug fix                         *
 *                     - Fix bug if user add ending ;         *
 *            04/21/16 - v1.3 Update                          *
 *                     - Save/Use CVIEW in profile            *
 *            04/21/16 - v1.2 Update                          *
 *                     - Add compact views                    *
 *            04/20/16 - v1.1 Update                          *
 *                     - Add version                          *
 *                     - Improved parse for short zstart      *
 *                       variables                            *
 *                     - Add message indicating creating      *
 *                       zstart variable                      *
 *            04/19/16 - v1.0 Creation                        *
 *                                                            *
 * ---------------------------------------------------------- */

 parse arg options

 parse value '' with null

/* -------------------------------------------- *
 * Check for applid of ISR and get there is not *
 * BUT Do not do this if called with options    *
 * -------------------------------------------- */
 Address ISPExec
 if left(options,4) /= "ISP:" then do
    "Vget (Zapplid)"
    "Control Errors Return"
    if zapplid <> "ISR" then do
       "Select CMD(%"sysvar('sysicmd') options ") Newappl(isr)"
       exit 0
       end
    end
 else do
      parse value options with "ISP:"zstart
      'Vput zstart profile'
      zedsmsg = "Saved"
      zedlmsg = "The ZSTART ISPF Profile variable" ,
                "has been saved and will be used" ,
                "the next time ISPF starts."
      "Setmsg msg(isrz001)"
      Exit 0
      end

/* ------------------------------ *
 * Load the ISPF Panels and start *
 * ------------------------------ */
 load_info = loadispf()

/* ------------------------------------ *
 * Get ISPF Variables from the Profile: *
 * ZSTART - ispf startup variable       *
 * CVIEW  - commands per row            *
 * ------------------------------------ */
 'vget (zstart cview) profile'
 if datatype(cview) /= 'NUM' then cview = 1
 ocview = cview
 if length(zstart) = 0 then create = 1
                       else create = 0

/* ------------------------------------------- *
 * ReStart - label to restart if cview changed *
 * ------------------------------------------- */
ReStart:
/* ------------------------------------------------------------- *
 * Check for length of zstart and create if not found. Otherwise *
 * process zstart commands onto the rows based on the cview      *
 * value.                                                        *
 *                                                               *
 * Remove ISPF; from zstart prefix if there - will add back later*
 * ------------------------------------------------------------- */
 if left(translate(zstart),5) = "ISPF;" then
    zstart = substr(zstart,6)
 if length(zstart) = 0
    then z1 = zstart
    else Select
   /* ------------------- *
    * One command per row *
    * ------------------- */
    When cview = 1 then do
         parse value zstart with z1';'z2
         parse value z2 with z2';'z3
         parse value z3 with z3';'z4
         parse value z4 with z4';'z5
         parse value z5 with z5';'z6
         parse value z6 with z6';'z7
         if right(z7,1) = ';' then
            z7 = left(z7,length(z7)-1)
         status = "updated"
        /* ------------------------------------------ *
         * Check for length and reset cview if needed *
         * ------------------------------------------ */
         if length(z7) > 71 then do
            cview = 2
            reset = 1
            zedsmsg = "Reflow"
            zedlmsg = "Columns per Row of 1 would result" ,
                      "in data truncation so changed to 2."
            signal restart
            end
         if reset = 1 then "Setmsg msg(isrz001)"
         end
   /* -------------------- *
    * Two commands per row *
    * -------------------- */
    When cview = 2 then do
         parse value zstart with w1';'w2';'zstart
         if length(w2) > 0
            then z1 = w1';'w2
            else z1 = w1
         parse value zstart with w1';'w2';'zstart
         if length(w2) > 0
            then z2 = w1';'w2
            else z2 = w1
         parse value zstart with w1';'w2';'zstart
         if length(w2) > 0
            then z3 = w1';'w2
            else z3 = w1
         parse value zstart with w1';'w2';'zstart
         if length(w2) > 0
            then z4 = w1';'w2
            else z4 = w1
         parse value zstart with w1';'w2';'zstart
         if length(w2) > 0
            then z5 = w1';'w2
            else z5 = w1
         parse value zstart with w1';'w2';'zstart
         if length(w2) > 0
            then z6 = w1';'w2
            else z6 = w1
         parse value zstart with w1';'w2';'zstart
         if length(w2) > 0
            then z7 = w1';'w2
            else z7 = w1
         status = "updated"
        /* ------------------------------------------ *
         * Check for length and reset cview if needed *
         * ------------------------------------------ */
         if length(z7) > 71 then do
            cview = 3
            reset = 1
            zedsmsg = "Reflow"
            zedlmsg = "Columns per Row of 2 would result" ,
                      "in data truncation so changed to 3."
            signal restart
            end
         if reset = 1 then "Setmsg msg(isrz001)"
         end
   /* ---------------------- *
    * Three commands per row *
    * ---------------------- */
    When cview = 3 then do
         parse value zstart with w1';'w2';'w3';'zstart
         wx = null
         Select
            when length(w1) > 0 & length(w2) > 0 & length(w3) > 0
                 then wx = w1';'w2';'w3
            when length(w1) > 0 & length(w2) > 0
                 then wx = w1';'w2
            when length(w1) > 0
                 then wx = w1
            otherwise nop
            end
            z1 = wx
         parse value zstart with w1';'w2';'w3';'zstart
         wx = null
         Select
            when length(w1) > 0 & length(w2) > 0 & length(w3) > 0
                 then wx = w1';'w2';'w3
            when length(w1) > 0 & length(w2) > 0
                 then wx = w1';'w2
            when length(w1) > 0
                 then wx = w1
            otherwise nop
            end
            z2 = wx
         parse value zstart with w1';'w2';'w3';'zstart
         wx = null
         Select
            when length(w1) > 0 & length(w2) > 0 & length(w3) > 0
                 then wx = w1';'w2';'w3
            when length(w1) > 0 & length(w2) > 0
                 then wx = w1';'w2
            when length(w1) > 0
                 then wx = w1
            otherwise nop
            end
            z3 = wx
         parse value zstart with w1';'w2';'w3';'zstart
         wx = null
         Select
            when length(w1) > 0 & length(w2) > 0 & length(w3) > 0
                 then wx = w1';'w2';'w3
            when length(w1) > 0 & length(w2) > 0
                 then wx = w1';'w2
            when length(w1) > 0
                 then wx = w1
            otherwise nop
            end
            z4 = wx
         parse value zstart with w1';'w2';'w3';'zstart
         wx = null
         Select
            when length(w1) > 0 & length(w2) > 0 & length(w3) > 0
                 then wx = w1';'w2';'w3
            when length(w1) > 0 & length(w2) > 0
                 then wx = w1';'w2
            when length(w1) > 0
                 then wx = w1
            otherwise nop
            end
            z5 = wx
         parse value zstart with w1';'w2';'w3';'zstart
         wx = null
         Select
            when length(w1) > 0 & length(w2) > 0 & length(w3) > 0
                 then wx = w1';'w2';'w3
            when length(w1) > 0 & length(w2) > 0
                 then wx = w1';'w2
            when length(w1) > 0
                 then wx = w1
            otherwise nop
            end
            z6 = wx
         parse value zstart with w1';'w2';'w3';'zstart
         wx = null
         Select
            when length(w1) > 0 & length(w2) > 0 & length(w3) > 0
                 then wx = w1';'w2';'w3
            when length(w1) > 0 & length(w2) > 0
                 then wx = w1';'w2
            when length(w1) > 0
                 then wx = w1
            otherwise nop
            end
            z7 = wx
         status = "updated"
         end
    otherwise nop
    end

 if create = 1 then
    status = "created"

 do forever
 parse value '' with null reset
 "Display Panel(zstart)"
 drc = rc
 if translate(zcmd) = 'CANCEL' then do
    zedsmsg = "Cancelled"
    zedlmsg = "The ZSTART ISPF Profile variable" ,
              "has been NOT been" status"."
    "Setmsg msg(isrz001)"
    leave
    end
 if drc = 0 then
   if ocview /= cview then do
      ocview = cview
      if right(z1,1) = ';' then z1 = left(z1,length(z1)-1)
      if z2 /= '' then zstart = z1';'z2
         if right(zstart,1) = ';' then
            zstart = left(zstart,length(zstart)-1)
      if z3 /= '' then zstart = zstart';'z3
         if right(zstart,1) = ';' then
            zstart = left(zstart,length(zstart)-1)
      if z4 /= '' then zstart = zstart';'z4
         if right(zstart,1) = ';' then
            zstart = left(zstart,length(zstart)-1)
      if z5 /= '' then zstart = zstart';'z5
         if right(zstart,1) = ';' then
            zstart = left(zstart,length(zstart)-1)
      if z6 /= '' then zstart = zstart';'z6
         if right(zstart,1) = ';' then
            zstart = left(zstart,length(zstart)-1)
      if z7 /= '' then zstart = zstart';'z7
         if right(zstart,1) = ';' then
            zstart = left(zstart,length(zstart)-1)
      signal ReStart
      end
 if rc = 8 then zcmd = "SAVE"
 if zcmd = 'SAVE' then do
    if translate(left(z1,5)) /= 'ISPF;'
       then zstart = "ISPF;"z1
       else zstart = z1
    if z2 /= '' then zstart = zstart';'z2
    if z3 /= '' then zstart = zstart';'z3
    if z4 /= '' then zstart = zstart';'z4
    if z5 /= '' then zstart = zstart';'z5
    if z6 /= '' then zstart = zstart';'z6
    if z7 /= '' then zstart = zstart';'z7
    'vput (zstart cview) profile'
    options = "ISP:"zstart
    "Select CMD(%"sysvar('sysicmd') options ") Newappl(isp)"
    leave
    end
 end

/* ------------------------------------ *
 * Now free up the loadispf allocations *
 * and exit the dialog                  *
 * ------------------------------------ */
  do until length(load_info) = 0
    parse value load_info with dd libd load_info
    if left(libd,6) = "ALTLIB" then do
       if libd = "ALTLIBC" then lib = "CLIST"
                           else lib = "EXEC"
       Address TSO,
         "Altlib Deact Application("lib")"
       end
    else "libdef" libd
    address tso "free f("dd")"
    end
 exit

/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    rc = loadispf()                                 *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          Address ISPEXEC                                   *
 *          do until length(load_info) = 0                    *
 *             parse value load_info with dd libd load_info   *
 *             if left(libd,6) = "ALTLIB" then do             *
 *                if libd = "ALTLIBC" then lib = "CLIST"      *
 *                                    else lib = "EXEC"       *
 *                Address TSO,                                *
 *                  "Altlib Deact Application("lib")"         *
 *                end                                         *
 *             else "libdef" libd                             *
 *             address tso "free f("dd")"                     *
 *             end                                            *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
 LoadISPF: Procedure

 parse value "" with null kmsg kpanel kskel first returns ,
                     kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
 last_line = sourceline()
 do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
    end
 rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
 do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
    end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
 Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
 clistdd = "lc"random(999)
 execdd  = "le"random(999)
 msgdd   = "lm"random(999)
 paneldd = "lp"random(999)
 skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
 if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd ALTLIBC)
    end
 if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd ALTLIBE)
    end
 if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd ISPMLIB)
    end
 if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd ISPPLIB)
    end
 if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd ISPSLIB)
    end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
 do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
       if first = 1 then call add_it
       type = "Clist"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">EXEC " then do
       if first = 1 then call add_it
       type = "Exec"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,5) = ">MSG " then do
       if first = 1 then call add_it
       type = "Msg"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,7) = ">PANEL " then do
       if first = 1 then call add_it
       type = "Panel"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">SKEL " then do
       if first = 1 then call add_it
       type = "Skel"
       first = 1
       parse value record with x name
       iterate
       end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
           "LmPut dataid("clist") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Exec" then
           "LmPut dataid("exec") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Msg" then
           "LmPut dataid("msg") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Panel" then
           "LmPut dataid("panel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Skel" then
           "LmPut dataid("skel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      end
    end
 if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
 if kclist <> null then do
    Address TSO,
    "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
    end
 if kexec <> null then do
    Address TSO,
    "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
    end
 if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
    end
 if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
    end
 if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
    end
 return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
 Add_It:
 Select
    When type = "Clist" then
         "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
         "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
         "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
         "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
         "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
    end
 type = null
 return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
 Alloc_DD:
 arg dd
 Address TSO
 if pos(left(dd,2),"lc le") > 0 then
 "Alloc f("dd") unit(vio) spa(5,5) dir(1)",
    "recfm(v b) lrecl(255) blksize(32760)"
 else
 "Alloc f("dd") unit(vio) spa(5,5) dir(1)",
    "recfm(f b) lrecl(80) blksize(23440)"
 return

/* --------------------------------- *
 * Start of the inline ISPF Elements *
 * --------------------------------- */
>START
>PANEL ZSTART
)Attr Default(@+_)
  + TYPE(TEXT)  INTENS(LOW)  SKIP(ON) COLOR(GREEN)
  _ type(input)  caps(off)
  $ type(input)  caps(off) hilite(uscore)
  # TYPE(OUTPUT) INTENS(Low ) CAPS(OFF) JUST(ASIS )
)Body expand(\\)
+-\-\-(@ZSTART - ISPF Profile Variable V&ver+)-\-\-
@Command ===>_ZCMD / /
+\ \@Commands Per Row_z+(1 to 3)
+
+  Edit the ISPF Profile variable@ZSTART+which is used at ISPF startup.
+                                                                       @Scroll
+ $z1                                                                    #z +
+ $z2                                                                    #z +
+ $z3                                                                    #z +
+ $z4                                                                    #z +
+ $z5                                                                    #z +
+ $z6                                                                    #z +
+ $z7                                                                    #z +
+
+  The@ZSTART+variable may contain any ISPF commands and each is separated
+  by a semi-colon@';'+if more than one command is on a line. A line
+  ending semi-colon is NOT required. For example:
+
+           @START 3.4;START 6;SWAP 1
+
+  This will start 3 split screens: ISPF Primary Menu, ISPF 3.4 and ISPF 6.
+
  @Note:+Lines are scrollable up to 1024 characters.
)INIT
 .zvars = '(cview zi1 zi2 zi3 zi4 zi5 zi6 zi7)'
 .CURSOR = 'ZCMD'
 .Help = zstarth
)PROC
)Field
 Field(z1) ind(zi1,'<>') len(1024)
 Field(z2) ind(zi2,'<>') len(1024)
 Field(z3) ind(zi3,'<>') len(1024)
 Field(z4) ind(zi4,'<>') len(1024)
 Field(z5) ind(zi5,'<>') len(1024)
 Field(z6) ind(zi6,'<>') len(1024)
 Field(z7) ind(zi7,'<>') len(1024)
)END
>PANEL ZSTARTH
)Attr Default(@+_)
   + TYPE(TEXT)  INTENS(LOW)  SKIP(ON) COLOR(GREEN)
)Body expand(\\)
@Tutorial+-\-\-(@ZSTART - ISPF Profile Variable+)-\-\-@Tutorial
+Command ===>_zcmd
+
+  The@ZSTART+ISPF Profile variable allows starting up multiple split screens
+  at ISPF invocation.
+
+  Be aware that each@ZSTART+command is placed on separate lines in the display
+  for easy editing. Use Commands Per Row to change this. Scroll Right/Left
+  is enable per row up to 1024 characters.
+
+  The variable may contain any ISPF command with each separated by the
+  delimiter (;), then start the logical screens or execute primary commands
+  separated by a semi-colon (;). The@ISPF;+prefix will be added when saved.
+
+  All ISPF or TSO commands may be coded. TSO commands should start with TSO.
+
+  The following example invokes ISPF 3.4, starts a split screen and executes
+  a REXX program called WHEREAMI
+
+   @3.4;START;TSO %WHEREAMI
+
+  To save the entries, press@F3+(END) and to@not+save the entries, type in
+ @CANCEL.
)PROC
 &zcont = zstarth
)END
>END
